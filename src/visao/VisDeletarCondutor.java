/*
 * VisDeletarCondutor.java
 *
 * Created on 04/05/2011, 00:07:01
 */
package visao;
import negocio.NegCondutor;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import persistencia.PerCondutor;

/**
 * Classe VisDeletarCondutor da camada de visao
 * 
 * @version 2.3 beta
 * @author Matheus Souza da Silva
 * @since 04/05/2011
 */
public class VisDeletarCondutor extends javax.swing.JInternalFrame {

    /**
    *
    * Método construtor da camada de visao
    * 
    * @version 2.3 beta
    * @author Matheus Souza da Silva
    * @since 04/05/2011
    */
    public VisDeletarCondutor() 
    {
        initComponents();
        jlCnh.setVisible(false);
    }//public VisDeletarCondutor()

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jbgOpcao = new javax.swing.ButtonGroup();
        jbDeletar = new javax.swing.JButton();
        jlCnh = new javax.swing.JLabel();
        jrCnh = new javax.swing.JRadioButton();
        jrCodigo = new javax.swing.JRadioButton();
        jlOpcao = new javax.swing.JLabel();
        jlCodigo = new javax.swing.JLabel();
        jtDeletar = new javax.swing.JTextField();
        jbVisualizar3 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTableCondutor = new javax.swing.JTable();

        setClosable(true);
        setIconifiable(true);
        setMaximizable(true);
        setTitle("Deletar Condutor");
        setPreferredSize(new java.awt.Dimension(1000, 670));

        jbDeletar.setText("Deletar");
        jbDeletar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbDeletarActionPerformed(evt);
            }
        });

        jlCnh.setText("Cnh");

        jbgOpcao.add(jrCnh);
        jrCnh.setText("Cnh");
        jrCnh.setActionCommand("nome");
        jrCnh.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jrCnhMouseClicked(evt);
            }
        });

        jbgOpcao.add(jrCodigo);
        jrCodigo.setSelected(true);
        jrCodigo.setText("Código Condutor");
        jrCodigo.setActionCommand("codigo");
        jrCodigo.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jrCodigoMouseClicked(evt);
            }
        });

        jlOpcao.setText("Opção");

        jlCodigo.setText("Código Condutor");

        jbVisualizar3.setText("Visualizar");
        jbVisualizar3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbVisualizar3ActionPerformed(evt);
            }
        });

        jTableCondutor.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Codigo Condutor", "Nome", "Sobrenome", "Rg", "Cpf", "data nascimento", "cnh", "Placa"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, true, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(jTableCondutor);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(49, 49, 49)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jtDeletar, javax.swing.GroupLayout.PREFERRED_SIZE, 187, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(14, 14, 14)
                                .addComponent(jrCodigo)
                                .addGap(27, 27, 27)
                                .addComponent(jrCnh))
                            .addComponent(jlOpcao)
                            .addComponent(jlCnh)
                            .addComponent(jlCodigo)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jbDeletar, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jbVisualizar3))))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 964, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addComponent(jlOpcao)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jrCodigo)
                    .addComponent(jrCnh))
                .addGap(29, 29, 29)
                .addComponent(jlCodigo)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jlCnh)
                .addGap(25, 25, 25)
                .addComponent(jtDeletar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jbDeletar)
                    .addComponent(jbVisualizar3))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 378, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    /**
    *
    * Método que tem finalidade de atualizar as informações da tabela da interface
    * 
    * @version 2.3 beta
    * @author Matheus Souza da Silva
    * @since 04/05/2011
    * @exception Exception Lança uma excessao se algum erro ocorrer
    */
    private void AtualizarTabela() 
    {
        try 
        {
            DefaultTableModel dtm = (DefaultTableModel) jTableCondutor.getModel();
            String[] linha = new String[8];

            NegCondutor tc = new   NegCondutor();
            ArrayList< PerCondutor> tb = new ArrayList< PerCondutor>();
            tb = tc.buscarTodosCondutores();

            //Zerar número de linhas da tabela
            dtm.setNumRows(0);

            //Preenchimento da JTable
            for (int i=0; i<tb.size(); i++) {
                linha[0] = Integer.toString(tb.get(i).getIdcondutor());
                linha[1] = tb.get(i).getNome();
                linha[2] = tb.get(i).getSobrenome();
                linha[3] = Integer.toString(tb.get(i).getRg());
                linha[4] = Integer.toString(tb.get(i).getCfp());
                linha[5] = (tb.get(i).getDatanascimento());
                linha[6] = Integer.toString(tb.get(i).getCnh());
                linha[7] = tb.get(i).getAutomovel().getPlaca();
                dtm.addRow(linha);
            }//for (int i=0; i<tb.size(); i++) {

        } catch (Exception e) {
            JOptionPane.showMessageDialog(
                this,
                "Erro! "+e.getMessage()
            );
        }//try
    }//private void AtualizarTabela() 
    
    /**
    *
    * Método que tem finalidade de deletar o condutor
    * 
    * @version 2.3 beta
    * @author Matheus Souza da Silva
    * @since 04/05/2011
    * @exception Exception Lança uma excessao se algum erro ocorrer
    */
    private void jbDeletarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbDeletarActionPerformed
        try 
        {
            NegCondutor ac = new NegCondutor();
            PerCondutor a = new PerCondutor();

            String op = jbgOpcao.getSelection().getActionCommand();

            if (op.equals("codigo")) {
                a.setIdcondutor(Integer.parseInt(jtDeletar.getText()));

                /* Antes de enviar para o método
                 deletar, enviamos para o método
                 que verifica se realmente existe
                 o objeto no Banco */

                if (ac.buscarCondutorCodigo(a)) {
                    
                    if (ac.deletarCondutorCodigo(a)) {
                        JOptionPane.showMessageDialog(this, "Condutor Excluído com Sucesso!");
                    } else {
                        JOptionPane.showMessageDialog(this, ac.erros+"\nFalha ao Excluír o condutor!");
                    }
                    
                    AtualizarTabela();
                } else {
                /* Se o método buscar retornar
                   false criamos uma Exceção
                   informando ao usuário que o
                   Artista não existe */
                    throw new Exception("Condutor não Existente! ");
                }

                ac.deletarCondutorCodigo(a);
                AtualizarTabela();
            } else {
                a.setCnh (Integer.parseInt(jtDeletar.getText()));

                /* Antes de enviar para o método
                 deletar, enviamos para o método
                 que verifica se realmente existe
                 o objeto no Banco */

                if (ac.buscarCondutorCnh(a)) {
                    
                    if (ac.deletarCondutorCnh(a)) {
                      JOptionPane.showMessageDialog(this, "Condutor Excluído com Sucesso!");
                    } else {
                        JOptionPane.showMessageDialog(this, ac.erros+"\nFalha ao Excluír o condutor!");
                    }//if (ac.deletarCondutorCnh(a)) {
                    
                    AtualizarTabela();
                } else {
                    throw new Exception("Condutor não Existente! ");
                }//if (ac.buscarCondutorCnh(a)) {
            }//if (op.equals("codigo")) {
            
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Erro! "+e.getMessage());
        }//try
}//GEN-LAST:event_jbDeletarActionPerformed

    /**
    *
    * Método que marcar o radio clicado
    * 
    * @version 2.3 beta
    * @author Matheus Souza da Silva
    * @since 04/05/2011
    */
    private void jrCnhMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jrCnhMouseClicked
        jlCnh.setVisible(true);
        jlCodigo.setVisible(false);
}//GEN-LAST:event_jrCnhMouseClicked
    
    /**
    *
    * Método que marcar o radio clicado
    * 
    * @version 2.3 beta
    * @author Matheus Souza da Silva
    * @since 04/05/2011
    */
    private void jrCodigoMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jrCodigoMouseClicked
        jlCnh.setVisible(false);
        jlCodigo.setVisible(true);
}//GEN-LAST:event_jrCodigoMouseClicked

    /**
    *
    * Método que tem finalidade de carregar na inteface as informações da tabela da interface
    * 
    * @version 2.3 beta
    * @author Matheus Souza da Silva
    * @since 04/05/2011
    * @exception Exception Lança uma excessao se algum erro ocorrer
    */
    private void jbVisualizar3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbVisualizar3ActionPerformed
        try 
        {
            NegCondutor mc = new NegCondutor();
            PerCondutor c  = new PerCondutor();
            ArrayList<PerCondutor> cAux = new ArrayList<PerCondutor>();
            cAux = mc.buscarTodosCondutores();

            DefaultTableModel dtm=(DefaultTableModel)jTableCondutor.getModel();

            dtm.setNumRows(0); // Código para zerar o número de linhas da Tabela.

            String[] linha = new String[8];

            for (int i=0 ; i<cAux.size() ; i++) {
                linha[0] = Integer.toString(cAux.get(i).getIdcondutor());
                linha[1] = cAux.get(i).getNome();
                linha[2] = cAux.get(i).getSobrenome();
                linha[3] = Integer.toString(cAux.get(i).getRg());
                linha[4] = Integer.toString(cAux.get(i).getCfp());
                linha[5] = (cAux.get(i).getDatanascimento());
                linha[6] = Integer.toString(cAux.get(i).getCnh());
                linha[7] = cAux.get(i).getAutomovel().getPlaca();

                dtm.addRow(linha);
            }//for (int i=0 ; i<cAux.size() ; i++) {
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Erro! "+e.getMessage());
        }//try
}//GEN-LAST:event_jbVisualizar3ActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTableCondutor;
    private javax.swing.JButton jbDeletar;
    private javax.swing.JButton jbVisualizar3;
    private javax.swing.ButtonGroup jbgOpcao;
    private javax.swing.JLabel jlCnh;
    private javax.swing.JLabel jlCodigo;
    private javax.swing.JLabel jlOpcao;
    private javax.swing.JRadioButton jrCnh;
    private javax.swing.JRadioButton jrCodigo;
    private javax.swing.JTextField jtDeletar;
    // End of variables declaration//GEN-END:variables

}
